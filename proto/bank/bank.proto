syntax = "proto3";

package bank;

option go_package = "grpcbank/generated_proto/bank";

// Account

message CurrentBalanceRequest {
  string account_number = 1 [json_name = "account_number"];
}

message CurrentBalanceResponse {
  double amount = 1;
  string current_date = 2 [json_name = "current_date"];
}

// Exchange

message ExchangeRateRequest {
  string from_currency = 1 [json_name = "from_currency"];
  string to_currency = 2 [json_name = "to_currency"];
}

message ExchangeRateResponse {
  string from_currency = 1 [json_name = "from_currency"];
  string to_currency = 2 [json_name = "to_currency"];
  double rate = 3;
  string timestamp = 4;
}

enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_IN = 1;
  TRANSACTION_TYPE_OUT = 2;
}

// Transaction

message Transaction {
  string account_number = 1 [json_name = "account_number"];
  TransactionType type = 2;
  double amount = 3;
  string timestamp = 4;
  string notes = 16;
}

message TransactionSummary {
  string account_number = 1 [json_name = "account_number"];
  double sum_amount_in = 2 [json_name = "sum_amount_in"];
  double sum_amount_out = 3 [json_name = "sum_amount_out"];
  double sum_total = 4 [json_name = "sum_total"];
  string transaction_date = 5 [json_name = "transaction_date"];
}

// Transfer

enum TransferStatus {
  TRANSFER_STATUS_UNSPECIFIED = 0;
  TRANSFER_STATUS_SUCCESS = 1;
  TRANSFER_STATUS_FAILED = 2;
}

message TransferRequest {
  string from_account_number = 1 [json_name = "from_account_number"];
  string to_account_number = 2 [json_name = "to_account_number"];
  string currency = 3;
  double amount = 4;
}

message TransferResponse {
  string from_account_number = 1 [json_name = "from_account_number"];
  string to_account_number = 2 [json_name = "to_account_number"];
  string currency = 3;
  double amount = 4;
  TransferStatus status = 5;
  string timestamp = 6;
}

// Service

service BankService {
  rpc GetCurrentBalance(CurrentBalanceRequest) returns (CurrentBalanceResponse) {}
  rpc FetchExchangeRates(ExchangeRateRequest)  returns (stream ExchangeRateResponse) {}
  rpc SummarizeTransactions(stream Transaction) returns (TransactionSummary) {}
  rpc TransferMultiple(stream TransferRequest) returns (stream TransferResponse) {}
}